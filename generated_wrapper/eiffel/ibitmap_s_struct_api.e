note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class IBITMAP_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	width: NATURAL
			-- Access member `width`
		require
			exists: exists
		do
			Result := c_width (item)
		ensure
			result_correct: Result = c_width (item)
		end

	set_width (a_value: NATURAL) 
			-- Change the value of member `width` to `a_value`.
		require
			exists: exists
		do
			set_c_width (item, a_value)
		ensure
			width_set: a_value = width
		end

	height: NATURAL
			-- Access member `height`
		require
			exists: exists
		do
			Result := c_height (item)
		ensure
			result_correct: Result = c_height (item)
		end

	set_height (a_value: NATURAL) 
			-- Change the value of member `height` to `a_value`.
		require
			exists: exists
		do
			set_c_height (item, a_value)
		ensure
			height_set: a_value = height
		end

	depth: NATURAL
			-- Access member `depth`
		require
			exists: exists
		do
			Result := c_depth (item)
		ensure
			result_correct: Result = c_depth (item)
		end

	set_depth (a_value: NATURAL) 
			-- Change the value of member `depth` to `a_value`.
		require
			exists: exists
		do
			set_c_depth (item, a_value)
		ensure
			depth_set: a_value = depth
		end

	scanline: NATURAL
			-- Access member `scanline`
		require
			exists: exists
		do
			Result := c_scanline (item)
		ensure
			result_correct: Result = c_scanline (item)
		end

	set_scanline (a_value: NATURAL) 
			-- Change the value of member `scanline` to `a_value`.
		require
			exists: exists
		do
			set_c_scanline (item, a_value)
		ensure
			scanline_set: a_value = scanline
		end

	data: POINTER
			-- Access member `data`
		require
			exists: exists
		do
			Result := c_data (item)
		ensure
			result_correct: Result = c_data (item)
		end

feature {NONE} -- Implementation wrapper for struct struct ibitmap_s

	sizeof_external: INTEGER 
		external
			"C inline use <inkview.h>"
		alias
			"sizeof(struct ibitmap_s)"
		end

	c_width (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->width
			]"
		end

	set_c_width (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->width =  (unsigned short)$a_value
			]"
		ensure
			width_set: a_value = c_width (an_item)
		end

	c_height (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->height
			]"
		end

	set_c_height (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->height =  (unsigned short)$a_value
			]"
		ensure
			height_set: a_value = c_height (an_item)
		end

	c_depth (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->depth
			]"
		end

	set_c_depth (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->depth =  (unsigned short)$a_value
			]"
		ensure
			depth_set: a_value = c_depth (an_item)
		end

	c_scanline (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->scanline
			]"
		end

	set_c_scanline (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->scanline =  (unsigned short)$a_value
			]"
		ensure
			scanline_set: a_value = c_scanline (an_item)
		end

	c_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ibitmap_s*)$an_item)->data
			]"
		end

end
