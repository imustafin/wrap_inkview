note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class IFONT_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable C_STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item )
		end

	family:  detachable C_STRING
			-- Access member `family`
		require
			exists: exists
		do
			if attached c_family (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_family (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_family (a_value: C_STRING) 
			-- Change the value of member `family` to `a_value`.
		require
			exists: exists
		do
			set_c_family (item, a_value.item )
		end

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

	aa: CHARACTER
			-- Access member `aa`
		require
			exists: exists
		do
			Result := c_aa (item)
		ensure
			result_correct: Result = c_aa (item)
		end

	set_aa (a_value: CHARACTER) 
			-- Change the value of member `aa` to `a_value`.
		require
			exists: exists
		do
			set_c_aa (item, a_value)
		ensure
			aa_set: a_value = aa
		end

	isbold: CHARACTER
			-- Access member `isbold`
		require
			exists: exists
		do
			Result := c_isbold (item)
		ensure
			result_correct: Result = c_isbold (item)
		end

	set_isbold (a_value: CHARACTER) 
			-- Change the value of member `isbold` to `a_value`.
		require
			exists: exists
		do
			set_c_isbold (item, a_value)
		ensure
			isbold_set: a_value = isbold
		end

	isitalic: CHARACTER
			-- Access member `isitalic`
		require
			exists: exists
		do
			Result := c_isitalic (item)
		ensure
			result_correct: Result = c_isitalic (item)
		end

	set_isitalic (a_value: CHARACTER) 
			-- Change the value of member `isitalic` to `a_value`.
		require
			exists: exists
		do
			set_c_isitalic (item, a_value)
		ensure
			isitalic_set: a_value = isitalic
		end

	r1: CHARACTER
			-- Access member `_r1`
		require
			exists: exists
		do
			Result := c_r1 (item)
		ensure
			result_correct: Result = c_r1 (item)
		end

	set_r1 (a_value: CHARACTER) 
			-- Change the value of member `_r1` to `a_value`.
		require
			exists: exists
		do
			set_c_r1 (item, a_value)
		ensure
			r1_set: a_value = r1
		end

	charset: NATURAL
			-- Access member `charset`
		require
			exists: exists
		do
			Result := c_charset (item)
		ensure
			result_correct: Result = c_charset (item)
		end

	set_charset (a_value: NATURAL) 
			-- Change the value of member `charset` to `a_value`.
		require
			exists: exists
		do
			set_c_charset (item, a_value)
		ensure
			charset_set: a_value = charset
		end

	r2: NATURAL
			-- Access member `_r2`
		require
			exists: exists
		do
			Result := c_r2 (item)
		ensure
			result_correct: Result = c_r2 (item)
		end

	set_r2 (a_value: NATURAL) 
			-- Change the value of member `_r2` to `a_value`.
		require
			exists: exists
		do
			set_c_r2 (item, a_value)
		ensure
			r2_set: a_value = r2
		end

	color: INTEGER
			-- Access member `color`
		require
			exists: exists
		do
			Result := c_color (item)
		ensure
			result_correct: Result = c_color (item)
		end

	set_color (a_value: INTEGER) 
			-- Change the value of member `color` to `a_value`.
		require
			exists: exists
		do
			set_c_color (item, a_value)
		ensure
			color_set: a_value = color
		end

	height: INTEGER
			-- Access member `height`
		require
			exists: exists
		do
			Result := c_height (item)
		ensure
			result_correct: Result = c_height (item)
		end

	set_height (a_value: INTEGER) 
			-- Change the value of member `height` to `a_value`.
		require
			exists: exists
		do
			set_c_height (item, a_value)
		ensure
			height_set: a_value = height
		end

	linespacing: INTEGER
			-- Access member `linespacing`
		require
			exists: exists
		do
			Result := c_linespacing (item)
		ensure
			result_correct: Result = c_linespacing (item)
		end

	set_linespacing (a_value: INTEGER) 
			-- Change the value of member `linespacing` to `a_value`.
		require
			exists: exists
		do
			set_c_linespacing (item, a_value)
		ensure
			linespacing_set: a_value = linespacing
		end

	baseline: INTEGER
			-- Access member `baseline`
		require
			exists: exists
		do
			Result := c_baseline (item)
		ensure
			result_correct: Result = c_baseline (item)
		end

	set_baseline (a_value: INTEGER) 
			-- Change the value of member `baseline` to `a_value`.
		require
			exists: exists
		do
			set_c_baseline (item, a_value)
		ensure
			baseline_set: a_value = baseline
		end

	fdata: POINTER
			-- Access member `fdata`
		require
			exists: exists
		do
			Result := c_fdata (item)
		ensure
			result_correct: Result = c_fdata (item)
		end

	set_fdata (a_value: POINTER) 
			-- Change the value of member `fdata` to `a_value`.
		require
			exists: exists
		do
			set_c_fdata (item, a_value)
		ensure
			fdata_set: a_value = fdata
		end

feature {NONE} -- Implementation wrapper for struct struct ifont_s

	sizeof_external: INTEGER 
		external
			"C inline use <inkview.h>"
		alias
			"sizeof(struct ifont_s)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->name =  (char*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_family (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->family
			]"
		end

	set_c_family (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->family =  (char*)$a_value
			]"
		ensure
			family_set: a_value = c_family (an_item)
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->size =  (int)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

	c_aa (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->aa
			]"
		end

	set_c_aa (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->aa =  (unsigned char)$a_value
			]"
		ensure
			aa_set: a_value = c_aa (an_item)
		end

	c_isbold (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->isbold
			]"
		end

	set_c_isbold (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->isbold =  (unsigned char)$a_value
			]"
		ensure
			isbold_set: a_value = c_isbold (an_item)
		end

	c_isitalic (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->isitalic
			]"
		end

	set_c_isitalic (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->isitalic =  (unsigned char)$a_value
			]"
		ensure
			isitalic_set: a_value = c_isitalic (an_item)
		end

	c_r1 (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->_r1
			]"
		end

	set_c_r1 (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->_r1 =  (unsigned char)$a_value
			]"
		ensure
			r1_set: a_value = c_r1 (an_item)
		end

	c_charset (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->charset
			]"
		end

	set_c_charset (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->charset =  (unsigned short)$a_value
			]"
		ensure
			charset_set: a_value = c_charset (an_item)
		end

	c_r2 (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->_r2
			]"
		end

	set_c_r2 (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->_r2 =  (unsigned short)$a_value
			]"
		ensure
			r2_set: a_value = c_r2 (an_item)
		end

	c_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->color
			]"
		end

	set_c_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->color =  (int)$a_value
			]"
		ensure
			color_set: a_value = c_color (an_item)
		end

	c_height (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->height
			]"
		end

	set_c_height (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->height =  (int)$a_value
			]"
		ensure
			height_set: a_value = c_height (an_item)
		end

	c_linespacing (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->linespacing
			]"
		end

	set_c_linespacing (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->linespacing =  (int)$a_value
			]"
		ensure
			linespacing_set: a_value = c_linespacing (an_item)
		end

	c_baseline (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->baseline
			]"
		end

	set_c_baseline (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->baseline =  (int)$a_value
			]"
		ensure
			baseline_set: a_value = c_baseline (an_item)
		end

	c_fdata (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->fdata
			]"
		end

	set_c_fdata (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct ifont_s*)$an_item)->fdata =  (void*)$a_value
			]"
		ensure
			fdata_set: a_value = c_fdata (an_item)
		end

end
