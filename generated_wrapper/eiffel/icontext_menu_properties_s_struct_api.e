note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class ICONTEXT_MENU_PROPERTIES_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	font_normal: detachable IFONT_S_STRUCT_API 
			-- Access member `font_normal`
		require
			exists: exists
		do
			if attached c_font_normal (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_font_normal (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_font_normal (item) 
		end

	set_font_normal (a_value: IFONT_S_STRUCT_API) 
			-- Set member `font_normal`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_font_normal (item, a_value.item)
		ensure
			font_normal_set: attached font_normal as l_value implies l_value.item = a_value.item
		end

	font_selected: detachable IFONT_S_STRUCT_API 
			-- Access member `font_selected`
		require
			exists: exists
		do
			if attached c_font_selected (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_font_selected (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_font_selected (item) 
		end

	set_font_selected (a_value: IFONT_S_STRUCT_API) 
			-- Set member `font_selected`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_font_selected (item, a_value.item)
		ensure
			font_selected_set: attached font_selected as l_value implies l_value.item = a_value.item
		end

	font_disabled: detachable IFONT_S_STRUCT_API 
			-- Access member `font_disabled`
		require
			exists: exists
		do
			if attached c_font_disabled (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_font_disabled (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_font_disabled (item) 
		end

	set_font_disabled (a_value: IFONT_S_STRUCT_API) 
			-- Set member `font_disabled`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_font_disabled (item, a_value.item)
		ensure
			font_disabled_set: attached font_disabled as l_value implies l_value.item = a_value.item
		end

	background_color_normal: INTEGER
			-- Access member `background_color_normal`
		require
			exists: exists
		do
			Result := c_background_color_normal (item)
		ensure
			result_correct: Result = c_background_color_normal (item)
		end

	set_background_color_normal (a_value: INTEGER) 
			-- Change the value of member `background_color_normal` to `a_value`.
		require
			exists: exists
		do
			set_c_background_color_normal (item, a_value)
		ensure
			background_color_normal_set: a_value = background_color_normal
		end

	background_color_disabled: INTEGER
			-- Access member `background_color_disabled`
		require
			exists: exists
		do
			Result := c_background_color_disabled (item)
		ensure
			result_correct: Result = c_background_color_disabled (item)
		end

	set_background_color_disabled (a_value: INTEGER) 
			-- Change the value of member `background_color_disabled` to `a_value`.
		require
			exists: exists
		do
			set_c_background_color_disabled (item, a_value)
		ensure
			background_color_disabled_set: a_value = background_color_disabled
		end

	blackout: INTEGER
			-- Access member `blackout`
		require
			exists: exists
		do
			Result := c_blackout (item)
		ensure
			result_correct: Result = c_blackout (item)
		end

	set_blackout (a_value: INTEGER) 
			-- Change the value of member `blackout` to `a_value`.
		require
			exists: exists
		do
			set_c_blackout (item, a_value)
		ensure
			blackout_set: a_value = blackout
		end

	item_height: INTEGER
			-- Access member `item_height`
		require
			exists: exists
		do
			Result := c_item_height (item)
		ensure
			result_correct: Result = c_item_height (item)
		end

	set_item_height (a_value: INTEGER) 
			-- Change the value of member `item_height` to `a_value`.
		require
			exists: exists
		do
			set_c_item_height (item, a_value)
		ensure
			item_height_set: a_value = item_height
		end

	item_border_indent_horizontal: INTEGER
			-- Access member `item_border_indent_horizontal`
		require
			exists: exists
		do
			Result := c_item_border_indent_horizontal (item)
		ensure
			result_correct: Result = c_item_border_indent_horizontal (item)
		end

	set_item_border_indent_horizontal (a_value: INTEGER) 
			-- Change the value of member `item_border_indent_horizontal` to `a_value`.
		require
			exists: exists
		do
			set_c_item_border_indent_horizontal (item, a_value)
		ensure
			item_border_indent_horizontal_set: a_value = item_border_indent_horizontal
		end

	separator_indent_horizontal: INTEGER
			-- Access member `separator_indent_horizontal`
		require
			exists: exists
		do
			Result := c_separator_indent_horizontal (item)
		ensure
			result_correct: Result = c_separator_indent_horizontal (item)
		end

	set_separator_indent_horizontal (a_value: INTEGER) 
			-- Change the value of member `separator_indent_horizontal` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_indent_horizontal (item, a_value)
		ensure
			separator_indent_horizontal_set: a_value = separator_indent_horizontal
		end

	separator_indent_vertical: INTEGER
			-- Access member `separator_indent_vertical`
		require
			exists: exists
		do
			Result := c_separator_indent_vertical (item)
		ensure
			result_correct: Result = c_separator_indent_vertical (item)
		end

	set_separator_indent_vertical (a_value: INTEGER) 
			-- Change the value of member `separator_indent_vertical` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_indent_vertical (item, a_value)
		ensure
			separator_indent_vertical_set: a_value = separator_indent_vertical
		end

	separator_height: INTEGER
			-- Access member `separator_height`
		require
			exists: exists
		do
			Result := c_separator_height (item)
		ensure
			result_correct: Result = c_separator_height (item)
		end

	set_separator_height (a_value: INTEGER) 
			-- Change the value of member `separator_height` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_height (item, a_value)
		ensure
			separator_height_set: a_value = separator_height
		end

	separator_style: INTEGER
			-- Access member `separator_style`
		require
			exists: exists
		do
			Result := c_separator_style (item)
		ensure
			result_correct: Result = c_separator_style (item)
		end

	set_separator_style (a_value: INTEGER) 
			-- Change the value of member `separator_style` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_style (item, a_value)
		ensure
			separator_style_set: a_value = separator_style
		end

	separator_color: INTEGER
			-- Access member `separator_color`
		require
			exists: exists
		do
			Result := c_separator_color (item)
		ensure
			result_correct: Result = c_separator_color (item)
		end

	set_separator_color (a_value: INTEGER) 
			-- Change the value of member `separator_color` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_color (item, a_value)
		ensure
			separator_color_set: a_value = separator_color
		end

	separator_frequency: INTEGER
			-- Access member `separator_frequency`
		require
			exists: exists
		do
			Result := c_separator_frequency (item)
		ensure
			result_correct: Result = c_separator_frequency (item)
		end

	set_separator_frequency (a_value: INTEGER) 
			-- Change the value of member `separator_frequency` to `a_value`.
		require
			exists: exists
		do
			set_c_separator_frequency (item, a_value)
		ensure
			separator_frequency_set: a_value = separator_frequency
		end

	marker_height: INTEGER
			-- Access member `marker_height`
		require
			exists: exists
		do
			Result := c_marker_height (item)
		ensure
			result_correct: Result = c_marker_height (item)
		end

	set_marker_height (a_value: INTEGER) 
			-- Change the value of member `marker_height` to `a_value`.
		require
			exists: exists
		do
			set_c_marker_height (item, a_value)
		ensure
			marker_height_set: a_value = marker_height
		end

	marker_indent_horizontal: INTEGER
			-- Access member `marker_indent_horizontal`
		require
			exists: exists
		do
			Result := c_marker_indent_horizontal (item)
		ensure
			result_correct: Result = c_marker_indent_horizontal (item)
		end

	set_marker_indent_horizontal (a_value: INTEGER) 
			-- Change the value of member `marker_indent_horizontal` to `a_value`.
		require
			exists: exists
		do
			set_c_marker_indent_horizontal (item, a_value)
		ensure
			marker_indent_horizontal_set: a_value = marker_indent_horizontal
		end

	marker_style: INTEGER
			-- Access member `marker_style`
		require
			exists: exists
		do
			Result := c_marker_style (item)
		ensure
			result_correct: Result = c_marker_style (item)
		end

	set_marker_style (a_value: INTEGER) 
			-- Change the value of member `marker_style` to `a_value`.
		require
			exists: exists
		do
			set_c_marker_style (item, a_value)
		ensure
			marker_style_set: a_value = marker_style
		end

	marker_color: INTEGER
			-- Access member `marker_color`
		require
			exists: exists
		do
			Result := c_marker_color (item)
		ensure
			result_correct: Result = c_marker_color (item)
		end

	set_marker_color (a_value: INTEGER) 
			-- Change the value of member `marker_color` to `a_value`.
		require
			exists: exists
		do
			set_c_marker_color (item, a_value)
		ensure
			marker_color_set: a_value = marker_color
		end

	border_size: INTEGER
			-- Access member `border_size`
		require
			exists: exists
		do
			Result := c_border_size (item)
		ensure
			result_correct: Result = c_border_size (item)
		end

	set_border_size (a_value: INTEGER) 
			-- Change the value of member `border_size` to `a_value`.
		require
			exists: exists
		do
			set_c_border_size (item, a_value)
		ensure
			border_size_set: a_value = border_size
		end

	border_radius: INTEGER
			-- Access member `border_radius`
		require
			exists: exists
		do
			Result := c_border_radius (item)
		ensure
			result_correct: Result = c_border_radius (item)
		end

	set_border_radius (a_value: INTEGER) 
			-- Change the value of member `border_radius` to `a_value`.
		require
			exists: exists
		do
			set_c_border_radius (item, a_value)
		ensure
			border_radius_set: a_value = border_radius
		end

	title_height: INTEGER
			-- Access member `title_height`
		require
			exists: exists
		do
			Result := c_title_height (item)
		ensure
			result_correct: Result = c_title_height (item)
		end

	set_title_height (a_value: INTEGER) 
			-- Change the value of member `title_height` to `a_value`.
		require
			exists: exists
		do
			set_c_title_height (item, a_value)
		ensure
			title_height_set: a_value = title_height
		end

	enable_pointer: INTEGER
			-- Access member `enable_pointer`
		require
			exists: exists
		do
			Result := c_enable_pointer (item)
		ensure
			result_correct: Result = c_enable_pointer (item)
		end

	set_enable_pointer (a_value: INTEGER) 
			-- Change the value of member `enable_pointer` to `a_value`.
		require
			exists: exists
		do
			set_c_enable_pointer (item, a_value)
		ensure
			enable_pointer_set: a_value = enable_pointer
		end

	font_normal_color: INTEGER
			-- Access member `font_normal_color`
		require
			exists: exists
		do
			Result := c_font_normal_color (item)
		ensure
			result_correct: Result = c_font_normal_color (item)
		end

	set_font_normal_color (a_value: INTEGER) 
			-- Change the value of member `font_normal_color` to `a_value`.
		require
			exists: exists
		do
			set_c_font_normal_color (item, a_value)
		ensure
			font_normal_color_set: a_value = font_normal_color
		end

	font_selected_color: INTEGER
			-- Access member `font_selected_color`
		require
			exists: exists
		do
			Result := c_font_selected_color (item)
		ensure
			result_correct: Result = c_font_selected_color (item)
		end

	set_font_selected_color (a_value: INTEGER) 
			-- Change the value of member `font_selected_color` to `a_value`.
		require
			exists: exists
		do
			set_c_font_selected_color (item, a_value)
		ensure
			font_selected_color_set: a_value = font_selected_color
		end

	font_disabled_color: INTEGER
			-- Access member `font_disabled_color`
		require
			exists: exists
		do
			Result := c_font_disabled_color (item)
		ensure
			result_correct: Result = c_font_disabled_color (item)
		end

	set_font_disabled_color (a_value: INTEGER) 
			-- Change the value of member `font_disabled_color` to `a_value`.
		require
			exists: exists
		do
			set_c_font_disabled_color (item, a_value)
		ensure
			font_disabled_color_set: a_value = font_disabled_color
		end

	bullet_show: INTEGER
			-- Access member `bullet_show`
		require
			exists: exists
		do
			Result := c_bullet_show (item)
		ensure
			result_correct: Result = c_bullet_show (item)
		end

	set_bullet_show (a_value: INTEGER) 
			-- Change the value of member `bullet_show` to `a_value`.
		require
			exists: exists
		do
			set_c_bullet_show (item, a_value)
		ensure
			bullet_show_set: a_value = bullet_show
		end

	bullet_style: INTEGER
			-- Access member `bullet_style`
		require
			exists: exists
		do
			Result := c_bullet_style (item)
		ensure
			result_correct: Result = c_bullet_style (item)
		end

	set_bullet_style (a_value: INTEGER) 
			-- Change the value of member `bullet_style` to `a_value`.
		require
			exists: exists
		do
			set_c_bullet_style (item, a_value)
		ensure
			bullet_style_set: a_value = bullet_style
		end

	item_border_indent_vertical: INTEGER
			-- Access member `item_border_indent_vertical`
		require
			exists: exists
		do
			Result := c_item_border_indent_vertical (item)
		ensure
			result_correct: Result = c_item_border_indent_vertical (item)
		end

	set_item_border_indent_vertical (a_value: INTEGER) 
			-- Change the value of member `item_border_indent_vertical` to `a_value`.
		require
			exists: exists
		do
			set_c_item_border_indent_vertical (item, a_value)
		ensure
			item_border_indent_vertical_set: a_value = item_border_indent_vertical
		end

	background_style: INTEGER
			-- Access member `background_style`
		require
			exists: exists
		do
			Result := c_background_style (item)
		ensure
			result_correct: Result = c_background_style (item)
		end

	set_background_style (a_value: INTEGER) 
			-- Change the value of member `background_style` to `a_value`.
		require
			exists: exists
		do
			set_c_background_style (item, a_value)
		ensure
			background_style_set: a_value = background_style
		end

feature {NONE} -- Implementation wrapper for struct struct icontext_menu_properties_s

	sizeof_external: INTEGER 
		external
			"C inline use <inkview.h>"
		alias
			"sizeof(struct icontext_menu_properties_s)"
		end

	c_font_normal (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_normal
			]"
		end

	set_c_font_normal (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_normal =  (ifont*)$a_value
			]"
		ensure
			font_normal_set: a_value = c_font_normal (an_item)
		end

	c_font_selected (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_selected
			]"
		end

	set_c_font_selected (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_selected =  (ifont*)$a_value
			]"
		ensure
			font_selected_set: a_value = c_font_selected (an_item)
		end

	c_font_disabled (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_disabled
			]"
		end

	set_c_font_disabled (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_disabled =  (ifont*)$a_value
			]"
		ensure
			font_disabled_set: a_value = c_font_disabled (an_item)
		end

	c_background_color_normal (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_color_normal
			]"
		end

	set_c_background_color_normal (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_color_normal =  (int)$a_value
			]"
		ensure
			background_color_normal_set: a_value = c_background_color_normal (an_item)
		end

	c_background_color_disabled (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_color_disabled
			]"
		end

	set_c_background_color_disabled (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_color_disabled =  (int)$a_value
			]"
		ensure
			background_color_disabled_set: a_value = c_background_color_disabled (an_item)
		end

	c_blackout (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->blackout
			]"
		end

	set_c_blackout (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->blackout =  (int)$a_value
			]"
		ensure
			blackout_set: a_value = c_blackout (an_item)
		end

	c_item_height (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_height
			]"
		end

	set_c_item_height (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_height =  (int)$a_value
			]"
		ensure
			item_height_set: a_value = c_item_height (an_item)
		end

	c_item_border_indent_horizontal (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_border_indent_horizontal
			]"
		end

	set_c_item_border_indent_horizontal (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_border_indent_horizontal =  (int)$a_value
			]"
		ensure
			item_border_indent_horizontal_set: a_value = c_item_border_indent_horizontal (an_item)
		end

	c_separator_indent_horizontal (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_indent_horizontal
			]"
		end

	set_c_separator_indent_horizontal (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_indent_horizontal =  (int)$a_value
			]"
		ensure
			separator_indent_horizontal_set: a_value = c_separator_indent_horizontal (an_item)
		end

	c_separator_indent_vertical (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_indent_vertical
			]"
		end

	set_c_separator_indent_vertical (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_indent_vertical =  (int)$a_value
			]"
		ensure
			separator_indent_vertical_set: a_value = c_separator_indent_vertical (an_item)
		end

	c_separator_height (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_height
			]"
		end

	set_c_separator_height (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_height =  (int)$a_value
			]"
		ensure
			separator_height_set: a_value = c_separator_height (an_item)
		end

	c_separator_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_style
			]"
		end

	set_c_separator_style (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_style =  (int)$a_value
			]"
		ensure
			separator_style_set: a_value = c_separator_style (an_item)
		end

	c_separator_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_color
			]"
		end

	set_c_separator_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_color =  (int)$a_value
			]"
		ensure
			separator_color_set: a_value = c_separator_color (an_item)
		end

	c_separator_frequency (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_frequency
			]"
		end

	set_c_separator_frequency (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->separator_frequency =  (int)$a_value
			]"
		ensure
			separator_frequency_set: a_value = c_separator_frequency (an_item)
		end

	c_marker_height (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_height
			]"
		end

	set_c_marker_height (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_height =  (int)$a_value
			]"
		ensure
			marker_height_set: a_value = c_marker_height (an_item)
		end

	c_marker_indent_horizontal (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_indent_horizontal
			]"
		end

	set_c_marker_indent_horizontal (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_indent_horizontal =  (int)$a_value
			]"
		ensure
			marker_indent_horizontal_set: a_value = c_marker_indent_horizontal (an_item)
		end

	c_marker_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_style
			]"
		end

	set_c_marker_style (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_style =  (int)$a_value
			]"
		ensure
			marker_style_set: a_value = c_marker_style (an_item)
		end

	c_marker_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_color
			]"
		end

	set_c_marker_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->marker_color =  (int)$a_value
			]"
		ensure
			marker_color_set: a_value = c_marker_color (an_item)
		end

	c_border_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->border_size
			]"
		end

	set_c_border_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->border_size =  (int)$a_value
			]"
		ensure
			border_size_set: a_value = c_border_size (an_item)
		end

	c_border_radius (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->border_radius
			]"
		end

	set_c_border_radius (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->border_radius =  (int)$a_value
			]"
		ensure
			border_radius_set: a_value = c_border_radius (an_item)
		end

	c_title_height (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->title_height
			]"
		end

	set_c_title_height (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->title_height =  (int)$a_value
			]"
		ensure
			title_height_set: a_value = c_title_height (an_item)
		end

	c_enable_pointer (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->enable_pointer
			]"
		end

	set_c_enable_pointer (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->enable_pointer =  (int)$a_value
			]"
		ensure
			enable_pointer_set: a_value = c_enable_pointer (an_item)
		end

	c_font_normal_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_normal_color
			]"
		end

	set_c_font_normal_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_normal_color =  (int)$a_value
			]"
		ensure
			font_normal_color_set: a_value = c_font_normal_color (an_item)
		end

	c_font_selected_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_selected_color
			]"
		end

	set_c_font_selected_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_selected_color =  (int)$a_value
			]"
		ensure
			font_selected_color_set: a_value = c_font_selected_color (an_item)
		end

	c_font_disabled_color (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_disabled_color
			]"
		end

	set_c_font_disabled_color (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->font_disabled_color =  (int)$a_value
			]"
		ensure
			font_disabled_color_set: a_value = c_font_disabled_color (an_item)
		end

	c_bullet_show (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->bullet_show
			]"
		end

	set_c_bullet_show (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->bullet_show =  (int)$a_value
			]"
		ensure
			bullet_show_set: a_value = c_bullet_show (an_item)
		end

	c_bullet_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->bullet_style
			]"
		end

	set_c_bullet_style (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->bullet_style =  (int)$a_value
			]"
		ensure
			bullet_style_set: a_value = c_bullet_style (an_item)
		end

	c_item_border_indent_vertical (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_border_indent_vertical
			]"
		end

	set_c_item_border_indent_vertical (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->item_border_indent_vertical =  (int)$a_value
			]"
		ensure
			item_border_indent_vertical_set: a_value = c_item_border_indent_vertical (an_item)
		end

	c_background_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_style
			]"
		end

	set_c_background_style (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_properties_s*)$an_item)->background_style =  (int)$a_value
			]"
		ensure
			background_style_set: a_value = c_background_style (an_item)
		end

end
