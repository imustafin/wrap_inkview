note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class IMENUEX_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	index: INTEGER
			-- Access member `index`
		require
			exists: exists
		do
			Result := c_index (item)
		ensure
			result_correct: Result = c_index (item)
		end

	set_index (a_value: INTEGER) 
			-- Change the value of member `index` to `a_value`.
		require
			exists: exists
		do
			set_c_index (item, a_value)
		ensure
			index_set: a_value = index
		end

	text:  detachable C_STRING
			-- Access member `text`
		require
			exists: exists
		do
			if attached c_text (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_text (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_text (a_value: C_STRING) 
			-- Change the value of member `text` to `a_value`.
		require
			exists: exists
		do
			set_c_text (item, a_value.item )
		end

	submenu: detachable IMENUEX_S_STRUCT_API 
			-- Access member `submenu`
		require
			exists: exists
		do
			if attached c_submenu (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_submenu (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_submenu (item) 
		end

	set_submenu (a_value: IMENUEX_S_STRUCT_API) 
			-- Set member `submenu`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_submenu (item, a_value.item)
		ensure
			submenu_set: attached submenu as l_value implies l_value.item = a_value.item
		end

	icon: detachable IBITMAP_S_STRUCT_API 
			-- Access member `icon`
		require
			exists: exists
		do
			if attached c_icon (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_icon (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_icon (item) 
		end

	set_icon (a_value: IBITMAP_S_STRUCT_API) 
			-- Set member `icon`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_icon (item, a_value.item)
		ensure
			icon_set: attached icon as l_value implies l_value.item = a_value.item
		end

	reserved: POINTER
			-- Access member `reserved`
		require
			exists: exists
		do
			Result := c_reserved (item)
		ensure
			result_correct: Result = c_reserved (item)
		end

	set_reserved (a_value: POINTER) 
			-- Change the value of member `reserved` to `a_value`.
		require
			exists: exists
		do
			set_c_reserved (item, a_value)
		ensure
			reserved_set: a_value = reserved
		end

	font: detachable IFONT_S_STRUCT_API 
			-- Access member `font`
		require
			exists: exists
		do
			if attached c_font (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_font (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_font (item) 
		end

	set_font (a_value: IFONT_S_STRUCT_API) 
			-- Set member `font`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_font (item, a_value.item)
		ensure
			font_set: attached font as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct imenuex_s

	sizeof_external: INTEGER 
		external
			"C inline use <inkview.h>"
		alias
			"sizeof(struct imenuex_s)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->type =  (short)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_index (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->index
			]"
		end

	set_c_index (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->index =  (short)$a_value
			]"
		ensure
			index_set: a_value = c_index (an_item)
		end

	c_text (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->text
			]"
		end

	set_c_text (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->text =  (char*)$a_value
			]"
		ensure
			text_set: a_value = c_text (an_item)
		end

	c_submenu (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->submenu
			]"
		end

	set_c_submenu (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->submenu =  (struct imenuex_s*)$a_value
			]"
		ensure
			submenu_set: a_value = c_submenu (an_item)
		end

	c_icon (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->icon
			]"
		end

	set_c_icon (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->icon =  (ibitmap*)$a_value
			]"
		ensure
			icon_set: a_value = c_icon (an_item)
		end

	c_reserved (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->reserved
			]"
		end

	set_c_reserved (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->reserved =  (void*)$a_value
			]"
		ensure
			reserved_set: a_value = c_reserved (an_item)
		end

	c_font (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->font
			]"
		end

	set_c_font (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct imenuex_s*)$an_item)->font =  (ifont const*)$a_value
			]"
		ensure
			font_set: a_value = c_font (an_item)
		end

end
