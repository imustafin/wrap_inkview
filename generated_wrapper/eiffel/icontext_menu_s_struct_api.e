note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class ICONTEXT_MENU_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	id:  detachable C_STRING
			-- Access member `id`
		require
			exists: exists
		do
			if attached c_id (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_id (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_id (a_value: C_STRING) 
			-- Change the value of member `id` to `a_value`.
		require
			exists: exists
		do
			set_c_id (item, a_value.item )
		end

	hproc: POINTER
			-- Access member `hproc`
		require
			exists: exists
		do
			Result := c_hproc (item)
		ensure
			result_correct: Result = c_hproc (item)
		end

	set_hproc (a_value: POINTER) 
			-- Change the value of member `hproc` to `a_value`.
		require
			exists: exists
		do
			set_c_hproc (item, a_value)
		ensure
			hproc_set: a_value = hproc
		end

	menuex: detachable IMENUEX_S_STRUCT_API 
			-- Access member `menuex`
		require
			exists: exists
		do
			if attached c_menuex (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_menuex (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_menuex (item) 
		end

	set_menuex (a_value: IMENUEX_S_STRUCT_API) 
			-- Set member `menuex`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_menuex (item, a_value.item)
		ensure
			menuex_set: attached menuex as l_value implies l_value.item = a_value.item
		end

	menu: detachable IMENU_S_STRUCT_API 
			-- Access member `menu`
		require
			exists: exists
		do
			if attached c_menu (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_menu (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_menu (item) 
		end

	set_menu (a_value: IMENU_S_STRUCT_API) 
			-- Set member `menu`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_menu (item, a_value.item)
		ensure
			menu_set: attached menu as l_value implies l_value.item = a_value.item
		end

	pos_selected_item: POINTER
			-- Access member `pos_selected_item`
		require
			exists: exists
		do
			Result := c_pos_selected_item (item) 
		ensure
		end

	set_pos_selected_item (a_value: POINTER )
			-- Set member `pos_selected_item`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_pos_selected_item (item, a_value)
		ensure
			pos_selected_item_set: pos_selected_item = a_value 		end

	pos_menu: POINTER
			-- Access member `pos_menu`
		require
			exists: exists
		do
			Result := c_pos_menu (item) 
		ensure
		end

	set_pos_menu (a_value: POINTER )
			-- Set member `pos_menu`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_pos_menu (item, a_value)
		ensure
			pos_menu_set: pos_menu = a_value 		end

	properties: detachable ICONTEXT_MENU_PROPERTIES_S_STRUCT_API 
			-- Access member `properties`
		require
			exists: exists
		do
			if attached c_properties (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_properties (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_properties (item) 
		end

	set_properties (a_value: ICONTEXT_MENU_PROPERTIES_S_STRUCT_API) 
			-- Set member `properties`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_properties (item, a_value.item)
		ensure
			properties_set: attached properties as l_value implies l_value.item = a_value.item
		end

	active_element: INTEGER
			-- Access member `active_element`
		require
			exists: exists
		do
			Result := c_active_element (item)
		ensure
			result_correct: Result = c_active_element (item)
		end

	set_active_element (a_value: INTEGER) 
			-- Change the value of member `active_element` to `a_value`.
		require
			exists: exists
		do
			set_c_active_element (item, a_value)
		ensure
			active_element_set: a_value = active_element
		end

	enable_pointer: INTEGER
			-- Access member `enable_pointer`
		require
			exists: exists
		do
			Result := c_enable_pointer (item)
		ensure
			result_correct: Result = c_enable_pointer (item)
		end

	set_enable_pointer (a_value: INTEGER) 
			-- Change the value of member `enable_pointer` to `a_value`.
		require
			exists: exists
		do
			set_c_enable_pointer (item, a_value)
		ensure
			enable_pointer_set: a_value = enable_pointer
		end

	enable_aura: INTEGER
			-- Access member `enable_aura`
		require
			exists: exists
		do
			Result := c_enable_aura (item)
		ensure
			result_correct: Result = c_enable_aura (item)
		end

	set_enable_aura (a_value: INTEGER) 
			-- Change the value of member `enable_aura` to `a_value`.
		require
			exists: exists
		do
			set_c_enable_aura (item, a_value)
		ensure
			enable_aura_set: a_value = enable_aura
		end

	use_own_font: INTEGER
			-- Access member `use_own_font`
		require
			exists: exists
		do
			Result := c_use_own_font (item)
		ensure
			result_correct: Result = c_use_own_font (item)
		end

	set_use_own_font (a_value: INTEGER) 
			-- Change the value of member `use_own_font` to `a_value`.
		require
			exists: exists
		do
			set_c_use_own_font (item, a_value)
		ensure
			use_own_font_set: a_value = use_own_font
		end

	update_after_close: INTEGER
			-- Access member `update_after_close`
		require
			exists: exists
		do
			Result := c_update_after_close (item)
		ensure
			result_correct: Result = c_update_after_close (item)
		end

	set_update_after_close (a_value: INTEGER) 
			-- Change the value of member `update_after_close` to `a_value`.
		require
			exists: exists
		do
			set_c_update_after_close (item, a_value)
		ensure
			update_after_close_set: a_value = update_after_close
		end

	only_choise: INTEGER
			-- Access member `only_choise`
		require
			exists: exists
		do
			Result := c_only_choise (item)
		ensure
			result_correct: Result = c_only_choise (item)
		end

	set_only_choise (a_value: INTEGER) 
			-- Change the value of member `only_choise` to `a_value`.
		require
			exists: exists
		do
			set_c_only_choise (item, a_value)
		ensure
			only_choise_set: a_value = only_choise
		end

feature {NONE} -- Implementation wrapper for struct struct icontext_menu_s

	sizeof_external: INTEGER 
		external
			"C inline use <inkview.h>"
		alias
			"sizeof(struct icontext_menu_s)"
		end

	c_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->id
			]"
		end

	set_c_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->id =  (char const*)$a_value
			]"
		ensure
			id_set: a_value = c_id (an_item)
		end

	c_hproc (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->hproc
			]"
		end

	set_c_hproc (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->hproc =  (iv_menuhandler)$a_value
			]"
		ensure
			hproc_set: a_value = c_hproc (an_item)
		end

	c_menuex (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->menuex
			]"
		end

	set_c_menuex (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->menuex =  (imenuex const*)$a_value
			]"
		ensure
			menuex_set: a_value = c_menuex (an_item)
		end

	c_menu (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->menu
			]"
		end

	set_c_menu (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->menu =  (imenu const*)$a_value
			]"
		ensure
			menu_set: a_value = c_menu (an_item)
		end

	c_pos_selected_item (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				&((struct icontext_menu_s*)$an_item)->pos_selected_item
			]"
		end

	set_c_pos_selected_item (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->pos_selected_item =  *(irect*)$a_value
			]"
		end

	c_pos_menu (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				&((struct icontext_menu_s*)$an_item)->pos_menu
			]"
		end

	set_c_pos_menu (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->pos_menu =  *(irect*)$a_value
			]"
		end

	c_properties (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->properties
			]"
		end

	set_c_properties (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->properties =  (icontext_menu_properties*)$a_value
			]"
		ensure
			properties_set: a_value = c_properties (an_item)
		end

	c_active_element (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->active_element
			]"
		end

	set_c_active_element (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->active_element =  (int)$a_value
			]"
		ensure
			active_element_set: a_value = c_active_element (an_item)
		end

	c_enable_pointer (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->enable_pointer
			]"
		end

	set_c_enable_pointer (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->enable_pointer =  (short)$a_value
			]"
		ensure
			enable_pointer_set: a_value = c_enable_pointer (an_item)
		end

	c_enable_aura (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->enable_aura
			]"
		end

	set_c_enable_aura (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->enable_aura =  (short)$a_value
			]"
		ensure
			enable_aura_set: a_value = c_enable_aura (an_item)
		end

	c_use_own_font (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->use_own_font
			]"
		end

	set_c_use_own_font (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->use_own_font =  (short)$a_value
			]"
		ensure
			use_own_font_set: a_value = c_use_own_font (an_item)
		end

	c_update_after_close (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->update_after_close
			]"
		end

	set_c_update_after_close (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->update_after_close =  (short)$a_value
			]"
		ensure
			update_after_close_set: a_value = c_update_after_close (an_item)
		end

	c_only_choise (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->only_choise
			]"
		end

	set_c_only_choise (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <inkview.h>"
		alias
			"[
				((struct icontext_menu_s*)$an_item)->only_choise =  (short)$a_value
			]"
		ensure
			only_choise_set: a_value = c_only_choise (an_item)
		end

end
